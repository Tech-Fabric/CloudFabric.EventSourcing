@using ToDoList.Ui.Services;
@using ToDoList.Models;

@inject TaskListsService taskListsService
@inject NavigationManager navigationManager

<FormComponent TFormModel="CreateTaskRequest" TSubmitResultModel="TaskViewModel"
               OnSubmit="@OnSubmit" 
               OnSubmitSuccess="OnTaskCreated" 
               Model="model">
    <FormBody>
        <div class="col-sm-12">
            <label for="taskName" class="form-label">New task:</label>
            <InputText class="form-control" id="taskName" @bind-Value="model.Name"/>
            <ValidationMessage For="@(() => model.Name)"/>
            <div class="invalid-feedback">
                Looks good!
            </div>
        </div>
    </FormBody>
    <FormFooter>
    </FormFooter>
    <SubmitButtonText>
        Submit
    </SubmitButtonText>
    <SubmitButtonTextInProgress>
        Submitting...
    </SubmitButtonTextInProgress>
</FormComponent>

@code {
    public readonly CreateTaskRequest model = new();

    [Parameter]
    public Guid TaskListId { get; set; }
    
    [Parameter]
    public EventCallback<TaskViewModel> OnTaskCreated { get; set; }

    protected override void OnInitialized()
    {
        model.TaskListId = TaskListId;
    }
    
    private async Task<ServiceResult<TaskViewModel>> OnSubmit(CreateTaskRequest createTaskRequest)
    {
        var serviceResult = await taskListsService
            .CreateTask(createTaskRequest);

        return serviceResult;
    }
}