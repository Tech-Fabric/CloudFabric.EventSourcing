@typeparam TFormModel
@typeparam TSubmitResultModel

@using System
@using ToDoList.Models


<EditForm class="row g-3" Model="@Model" OnValidSubmit="OnValidSubmit">
    @FormBody

    <DataAnnotationsValidator />
    <FormComponentServerProblemDetailsHandler @ref="serverProblemDetailsHandler"/>

    @if (displayErrors)
    {
        <div class="col-sm-12">
            <div class="alert alert-danger" role="alert">
                <ValidationSummary />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    @errorMessage
                }
            </div>
        </div>
    }

    @FormFooter

    <div class="col-xs-12 col-sm-4 text-end">
        <button type="submit" disabled="@(submitInProgress)" class="btn btn-primary text-center text-nowrap">
            @if (submitInProgress)
            {
                @SubmitButtonTextInProgress
            }
            else
            {
                @SubmitButtonText
            }
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public RenderFragment? FormBody { get; set; }

    [Parameter]
    public RenderFragment? FormFooter { get; set; }

    [Parameter]
    public RenderFragment? SubmitButtonText { get; set; }

    [Parameter]
    public RenderFragment? SubmitButtonTextInProgress { get; set; }

    [Parameter]
    public Func<TFormModel, Task<ServiceResult<TSubmitResultModel>>>? OnSubmit { get; set; }
    
    [Parameter]
    public EventCallback<TSubmitResultModel> OnSubmitSuccess { get; set; }

    [Parameter]
    public TFormModel? Model { get; set; }

    FormComponentServerProblemDetailsHandler serverProblemDetailsHandler;

    private EditContext? editContext;
    private bool displayErrors = false;
    private bool submitInProgress = false;
    private string errorMessage = string.Empty;

    protected override void OnInitialized()
    {
        editContext = new(Model);
    }

    private async Task OnValidSubmit(EditContext context)
    {
        submitInProgress = true;
        errorMessage = string.Empty;
        
        if (editContext != null && editContext.Validate())
        {
            displayErrors = false;

            if (OnSubmit == null)
            {
                return;
            }

            if (Model == null)
            {
                errorMessage = "Form Model is null, can't submit.";
                displayErrors = true;
                
                return;
            }

            try
            {
                var serviceResult = await OnSubmit(Model);
        
                if(serviceResult.Succeed == false) {
                    errorMessage = $"{serviceResult.ProblemDetails?.Title}.";
                    displayErrors = true;
                    
                    if (serviceResult.ProblemDetails != null)
                    {
                        serverProblemDetailsHandler.DisplayErrors(serviceResult.ProblemDetails);
                    }
                }
                else
                {
                    await OnSubmitSuccess.InvokeAsync(serviceResult.Result);
                }
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
                displayErrors = true;
            }
            finally
            {
                submitInProgress = false;
            }
        }
        else
        {
            displayErrors = true;
        }
    }
}