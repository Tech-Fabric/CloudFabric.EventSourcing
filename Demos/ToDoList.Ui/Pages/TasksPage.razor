@page "/tasks"

@attribute [Authorize]

@inject TaskListsService taskListsService

<PageTitle>Tasks</PageTitle>

<div class="task-lists-container">
    @if (_initialLoadingCompleted == false)
    {
        <div class="alert alert-info" role="alert">
            Loading...
        </div>
    }
    else if (_initialLoadingCompleted && _taskLists.Count == 0)
    {
        <div class="alert alert-info" role="alert">
            There are no task lists yet.
        </div>
    }
    else
    {
        foreach (var taskList in _taskLists)
        {
            <div class="task-list card text-left">
                <div class="card-header">
                    @taskList.Name
                </div>
                <div class="card-body">
                    @* @foreach (var task in taskList.Tasks) *@
                    @* { *@
                    @*     <div class="task-container"> *@
                    @* *@
                    @*     </div> *@
                    @* } *@
                </div>
                <div class="card-footer text-muted text-left">
                    <CreateNewTaskComponent></CreateNewTaskComponent>
                </div>
            </div>
        }
    }

    @if (_initialLoadingCompleted == true)
    {
        <CreateNewTaskListComponent/>
    }
</div>

@code {
    private bool _initialLoadingCompleted = false;

    private List<TaskListViewModel> _taskLists = new List<TaskListViewModel>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var serviceResult = await taskListsService.GetTaskLists(100, 0);
            if (serviceResult.Succeed && serviceResult.Result != null)
            {
                _taskLists = serviceResult.Result;
            }

            _initialLoadingCompleted = true;

            StateHasChanged();
        }
    }

}